// Generated by CoffeeScript 1.3.3
(function() {
  var $, BrewGear, Route, goTo, routes, testDataSet, theController,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BrewGear = this.BrewGear = {};

  $ = jQuery;

  use('scripts/spine/spine');

  use('scripts/spine/route');

  use('scripts/spine/local');

  use('scripts/model');

  use('scripts/controller');

  console.log('in mainapp');

  Route = (function(_super) {

    __extends(Route, _super);

    function Route() {
      return Route.__super__.constructor.apply(this, arguments);
    }

    Route.visited = [];

    Route.reverseEffect = false;

    Route.changePage = function(pageName, options) {
      if (options == null) {
        options = {};
      }
      console.log("forwarding to " + pageName);
      options.changeHash = false;
      options.reverse = this.reverseEffect;
      $.mobile.changePage($(pageName), options);
      this.visited.push(window.location.hash);
      return this.reverseEffect = false;
    };

    Route.back = function() {
      this.visited.pop();
      if (this.visited) {
        this.reverseEffect = true;
        return window.location.hash = this.visited.pop() || "";
      }
    };

    return Route;

  })(Spine.Route);

  theController = null;

  goTo = function(controller) {
    theController = controller;
    Route.changePage(controller.el);
    return theController.render();
  };

  routes = function(routes) {
    var key, value, _results;
    _results = [];
    for (key in routes) {
      value = routes[key];
      _results.push(Route.add(key, value));
    }
    return _results;
  };

  routes({
    "/recipes/:id/fermentables": function(params) {
      return goTo(new BrewGear.Controller.Fermentables({
        model: BrewGear.Model.Recipe.findByAttribute('batch', params.id),
        el: '#fermentables'
      }));
    },
    "/recipes/:id": function(params) {
      return goTo(new BrewGear.Controller.Recipe({
        model: BrewGear.Model.Recipe.findByAttribute('batch', params.id),
        el: '#recipe'
      }));
    },
    "": function() {
      return goTo(new BrewGear.Controller.Recipes({
        model: BrewGear.Model.Recipe.all(),
        el: '#recipes'
      }));
    }
  });

  testDataSet = function() {
    var r;
    r = new BrewGear.Model.Recipe({
      batch: '1',
      name: 'My Dubble',
      fermentables: [
        new BrewGear.Model.Fermentable({
          name: 'Pilsmount',
          color: 3,
          amount: 3500
        }), new BrewGear.Model.Fermentable({
          name: 'Cara 120',
          color: 120,
          amount: 243
        })
      ]
    });
    return r = new BrewGear.Model.Recipe({
      batch: '2',
      name: 'My Tripple'
    });
  };

  $(function() {
    testDataSet();
    BrewGear.Model.Recipe.fetch();
    Route.setup();
    return $('a[data-rel="back"]').click(function() {
      return Route.back();
    });
  });

}).call(this);
