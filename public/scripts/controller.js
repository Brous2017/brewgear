// Generated by CoffeeScript 1.3.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  use('scripts/spine/spine');

  use('scripts/model');

  if ((_ref = BrewGear.Controller) == null) {
    BrewGear.Controller = {};
  }

  BrewGear.Controller.Null = (function(_super) {

    __extends(Null, _super);

    function Null() {
      return Null.__super__.constructor.apply(this, arguments);
    }

    return Null;

  })(Spine.Controller);

  BrewGear.Controller.Recipes = (function(_super) {

    __extends(Recipes, _super);

    function Recipes() {
      this.render = __bind(this.render, this);
      return Recipes.__super__.constructor.apply(this, arguments);
    }

    Recipes.elements = {
      'ul': 'list',
      '#recipe-item': 'template'
    };

    Recipes.prototype.render = function() {
      var recipe, _i, _len, _ref1;
      this.list.empty();
      _ref1 = this.model;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        recipe = _ref1[_i];
        this.list.append(this.template.tmpl(recipe));
      }
      return this.list.listview('refresh');
    };

    return Recipes;

  })(Spine.Controller);

  BrewGear.Controller.Recipe = (function(_super) {

    __extends(Recipe, _super);

    function Recipe() {
      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);
      return Recipe.__super__.constructor.apply(this, arguments);
    }

    Recipe.elements = {
      '.to-fermentables': 'fermentablesLink',
      '.to-hops': 'hopsLink',
      '.to-fermentation': 'fermentationLink',
      'input[name="batch"]': 'batch',
      'input[name="name"]': 'name'
    };

    Recipe.events = {
      'change input': 'update',
      'blur input': 'update'
    };

    Recipe.prototype.update = function() {
      this.model.batch = this.batch.val();
      this.model.name = this.name.val();
      return this.model.save();
    };

    Recipe.prototype.render = function() {
      var batch;
      this.batch.val(this.model.batch);
      this.name.val(this.model.name);
      batch = this.model.batch;
      this.fermentablesLink.attr('href', "#/recipes/" + batch + "/fermentables");
      this.hopsLink.attr('href', "#/recipes/" + batch + "/hops");
      return this.fermentationLink.attr('href', "#/recipes/" + batch + "/fermentation");
    };

    return Recipe;

  })(Spine.Controller);

  BrewGear.Controller.Fermentables = (function(_super) {

    __extends(Fermentables, _super);

    function Fermentables() {
      this.render = __bind(this.render, this);
      return Fermentables.__super__.constructor.apply(this, arguments);
    }

    Fermentables.elements = {
      'ul': 'list',
      '.template': 'template',
      'h3': 'name'
    };

    Fermentables.prototype.render = function() {
      var fermentable, _i, _len, _ref1;
      this.name = this.model.name;
      this.list.empty();
      _ref1 = this.model.fermentables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        fermentable = _ref1[_i];
        this.list.append(this.template.tmpl({
          name: fermentable.name,
          color: fermentable.color,
          weight: fermentable.weight,
          url: "#/recipes/" + this.model.batch + "/fermentables/0"
        }));
      }
      return this.list.listview('refresh');
    };

    return Fermentables;

  })(Spine.Controller);

}).call(this);
