// Generated by CoffeeScript 1.3.3
(function() {
  var BrewGear, Fermentable, Recipe, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  use('scripts/spine/spine');

  use('scripts/spine/local');

  use('scripts/spine/relation');

  BrewGear = (_ref = this.BrewGear) != null ? _ref : this.BrewGear = {};

  if ((_ref1 = BrewGear.Model) == null) {
    BrewGear.Model = {};
  }

  Recipe = (function(_super) {

    __extends(Recipe, _super);

    function Recipe() {
      return Recipe.__super__.constructor.apply(this, arguments);
    }

    Recipe.configure('Recipe', 'name', 'batch');

    Recipe.hasMany('fermentables', Fermentable);

    Recipe.extend(Spine.Model.Local);

    Recipe.prototype.validate = function() {
      if (!this.name) {
        return "name is required";
      }
    };

    return Recipe;

  })(Spine.Model);

  Fermentable = (function(_super) {

    __extends(Fermentable, _super);

    function Fermentable() {
      return Fermentable.__super__.constructor.apply(this, arguments);
    }

    Fermentable.configure('Fermentable', 'name', 'color', 'amount');

    Fermentable.belongsTo('recipe', Recipe);

    Fermentable.prototype.validate = function() {
      if (!this.name) {
        return "name is required";
      }
    };

    return Fermentable;

  })(Spine.Model);

  BrewGear.Model.Recipe = Recipe;

  BrewGear.Model.Fermentable = Fermentable;

}).call(this);
